// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Discogs models

model Artist {
  id          String    @id @default(cuid())
  externalId  BigInt    @unique
  name        String
  resourceUrl String
  releases    Release[]
}

model Track {
  releaseId String
  release   Release @relation(fields: [releaseId], references: [id], onDelete: Cascade)
  duration  String
  position  String
  title     String

  @@id([releaseId, position])
}

enum Status {
  PENDING
  PROCESSING
  SUCCESS
  FAILED
}

model Video {
  id          String  @id @default(cuid())
  releaseId   String
  release     Release @relation(fields: [releaseId], references: [id], onDelete: Cascade)
  description String?
  duration    Int
  embed       Boolean
  title       String
  uri         String
  status      Status  @default(PENDING)
  embedding   Float[]
}

model Release {
  id          String    @id @default(cuid())
  externalId  BigInt    @unique
  title       String
  artists     Artist[]
  thumb       String
  country     String
  genres      String[]
  lowestPrice Float?
  numForSale  Int
  resourceUrl String
  status      String
  styles      String[]
  tracklist   Track[]
  uri         String
  videos      Video[]
  year        Int
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  want        Want[]
  listing     Listing[]
}

enum SaleStatus {
  ForSale
  Draft
}

enum Currency {
  USD
  GBP
  EUR
  CAD
  AUD
  JPY
  CHF
  MXN
  BRL
  NZD
  SEK
  ZAR
}

enum Condition {
  Mint
  NearMint
  VeryGoodPlus
  VeryGood
  GoodPlus
  Good
  Fair
  Poor
}

enum SleeveCondition {
  Mint
  NearMint
  VeryGoodPlus
  VeryGood
  GoodPlus
  Good
  Fair
  Poor
  Generic
  NotGraded
  NoCover
}

model Price {
  id        String   @id @default(cuid())
  currency  Currency
  value     Float
  listingId String   @unique
  Listing   Listing  @relation(fields: [listingId], references: [id], onDelete: Cascade)
}

model Want {
  id          String       @id @default(cuid())
  externalId  BigInt       @unique
  resourceUrl String
  releaseId   String?
  release     Release?     @relation(fields: [releaseId], references: [id], onDelete: SetNull)
  search      Search[]
  similarity  Similarity[]
}

model Listing {
  id              String          @id @default(cuid())
  externalId      BigInt          @unique
  status          SaleStatus
  price           Price?
  allowOffers     Boolean
  condition       Condition
  sleeveCondition SleeveCondition
  shipsFrom       String
  uri             String
  comments        String
  releaseId       String?
  release         Release?        @relation(fields: [releaseId], references: [id], onDelete: SetNull)
  resourceUrl     String
  similarities    Similarity[]
  search          Search[]
}

model Similarity {
  listingId String
  listing   Listing @relation(fields: [listingId], references: [id], onDelete: Cascade)
  wantId    String
  want      Want    @relation(fields: [wantId], references: [id], onDelete: Cascade)
  searchId  String
  search    Search  @relation(fields: [searchId], references: [id], onDelete: Cascade)
  score     Float

  @@id([listingId, wantId])
}

model Search {
  id           String       @id @default(cuid())
  wantlist     Want[]
  listings     Listing[]
  similarities Similarity[]
  status       Status       @default(PENDING)
}
